// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/aal/go/pkg/mod/github.com/hajimehoshi/ebiten/v2@v2.8.8/internal/glfw/glfw_unix.go:1:1
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2012 The glfw3-go Authors
// SPDX-FileCopyrightText: 2023 The Ebitengine Authors

//go:build darwin || freebsd || linux || netbsd || openbsd

package glfw

//#include <stdlib.h>
//#define GLFW_INCLUDE_NONE
//#include "glfw3_unix.h"
import _ "unsafe"

import (
	"errors"
	"unsafe"
)

// Version constants.
const (
	VersionMajor    = ( /*line :21:20*/_Ciconst_GLFW_VERSION_MAJOR /*line :21:39*/)    // This is incremented when the API is changed in non-compatible ways.
	VersionMinor    = ( /*line :22:20*/_Ciconst_GLFW_VERSION_MINOR /*line :22:39*/)    // This is incremented when features are added to the API but it remains backward-compatible.
	VersionRevision = ( /*line :23:20*/_Ciconst_GLFW_VERSION_REVISION /*line :23:42*/) // This is incremented when a bug fix release is made that does not contain any API changes.
)

// Init initializes the GLFW library. Before most GLFW functions can be used,
// GLFW must be initialized, and before a program terminates GLFW should be
// terminated in order to free any resources allocated during or after
// initialization.
//
// If this function fails, it calls Terminate before returning. If it succeeds,
// you should call Terminate before the program exits.
//
// Additional calls to this function after successful initialization but before
// termination will succeed but will do nothing.
//
// This function may take several seconds to complete on some systems, while on
// other systems it may take only a fraction of a second to complete.
//
// On Mac OS X, this function will change the current directory of the
// application to the Contents/Resources subdirectory of the application's
// bundle, if present.
//
// This function may only be called from the main thread.
func Init() error {
	( /*line :46:2*/_Cfunc_glfwInit /*line :46:11*/)()
	if err := fetchErrorIgnoringPlatformError(); err != nil {
		return err
	}
	return nil
}

// Terminate destroys all remaining windows, frees any allocated resources and
// sets the library to an uninitialized state. Once this is called, you must
// again call Init successfully before you will be able to use most GLFW
// functions.
//
// If GLFW has been successfully initialized, this function should be called
// before the program exits. If initialization fails, there is no need to call
// this function, as it is called by Init before it returns failure.
//
// This function may only be called from the main thread.
func Terminate() error {
	( /*line :64:2*/_Cfunc_glfwTerminate /*line :64:16*/)()
	if err := fetchErrorIgnoringPlatformError(); err != nil {
		return err
	}
	return nil
}

// InitHint function sets hints for the next initialization of GLFW.
//
// The values you set hints to are never reset by GLFW, but they only take
// effect during initialization. Once GLFW has been initialized, any values you
// set will be ignored until the library is terminated and initialized again.
//
// Some hints are platform specific. These may be set on any platform but they
// will only affect their specific platform. Other platforms will ignore them.
// Setting these hints requires no platform specific headers or functions.
//
// This function must only be called from the main thread.
func InitHint(hint Hint, value int) {
	( /*line :83:2*/_Cfunc_glfwInitHint /*line :83:15*/)( /*line :83:17*/_Ctype_int /*line :83:22*/(hint),  /*line :83:30*/_Ctype_int /*line :83:35*/(value))
}

// GetVersion retrieves the major, minor and revision numbers of the GLFW
// library. It is intended for when you are using GLFW as a shared library and
// want to ensure that you are using the minimum required version.
//
// This function may be called before Init.
func GetVersion() (major, minor, revision int) {
	var (
		maj  /*line :93:7*/_Ctype_int /*line :93:12*/
		min  /*line :94:7*/_Ctype_int /*line :94:12*/
		rev  /*line :95:7*/_Ctype_int /*line :95:12*/
	)

	( /*line :98:2*/_Cfunc_glfwGetVersion /*line :98:17*/)(&maj, &min, &rev)
	return int(maj), int(min), int(rev)
}

// GetVersionString returns a static string generated at compile-time according
// to which configuration macros were defined. This is intended for use when
// submitting bug reports, to allow developers to see which code paths are
// enabled in a binary.
//
// This function may be called before Init.
func GetVersionString() string {
	return ( /*line :109:9*/_Cfunc_GoString /*line :109:18*/)(( /*line :109:20*/_Cfunc_glfwGetVersionString /*line :109:41*/)())
}

// GetClipboardString returns the contents of the system clipboard, if it
// contains or is convertible to a UTF-8 encoded string.
//
// This function may only be called from the main thread.
func GetClipboardString() (string, error) {
	cs := ( /*line :117:8*/_Cfunc_glfwGetClipboardString /*line :117:31*/)(nil)
	if cs == nil {
		if err := fetchErrorIgnoringPlatformError(); err != nil {
			if errors.Is(err, FormatUnavailable) {
				return "", nil
			}
			return "", err
		}
		return "", nil
	}
	return ( /*line :127:9*/_Cfunc_GoString /*line :127:18*/)(cs), nil
}

// SetClipboardString sets the system clipboard to the specified UTF-8 encoded
// string.
//
// This function may only be called from the main thread.
func SetClipboardString(str string) error {
	cp := ( /*line :135:8*/_Cfunc_CString /*line :135:16*/)(str)
	defer func() func() { _cgo0 := /*line :136:15*/unsafe.Pointer(cp); return func() { _cgoCheckPointer(_cgo0, nil); /*line :136:34*/_Cfunc_free(_cgo0); }}()()
	( /*line :137:2*/_Cfunc_glfwSetClipboardString /*line :137:25*/)(nil, cp)
	return fetchErrorIgnoringPlatformError()
}
