// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/aal/go/pkg/mod/github.com/hajimehoshi/ebiten/v2@v2.8.8/internal/glfw/native_darwin.go:1:1
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2012 The glfw3-go Authors
// SPDX-FileCopyrightText: 2023 The Ebitengine Authors

package glfw; import _cgo_unsafe "unsafe"

/*
#define GLFW_EXPOSE_NATIVE_COCOA
#define GLFW_EXPOSE_NATIVE_NSGL
#include "glfw3_unix.h"
#include "glfw3native_unix.h"

// workaround wrappers needed due to a cgo and/or LLVM bug.
// See: https://github.com/go-gl/glfw/issues/136
static void *workaround_glfwGetCocoaWindow(GLFWwindow *w) {
	return (void *)glfwGetCocoaWindow(w);
}
static void *workaround_glfwGetNSGLContext(GLFWwindow *w) {
	return (void *)glfwGetNSGLContext(w);
}
*/
import _ "unsafe"
import "unsafe"

// GetCocoaMonitor returns the CGDirectDisplayID of the monitor.
func (m *Monitor) GetCocoaMonitor() (uintptr, error) {
	ret := uintptr(func() _Ctype_CGDirectDisplayID{ _cgo0 := /*line :27:39*/m.data; _cgoCheckPointer(_cgo0, nil); return /*line :27:46*/_Cfunc_glfwGetCocoaMonitor(_cgo0); }())
	return ret, fetchErrorIgnoringPlatformError()
}

// GetCocoaWindow returns the NSWindow of the window.
func (w *Window) GetCocoaWindow() (uintptr, error) {
	ret := uintptr(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :33:49*/w.data; _cgoCheckPointer(_cgo0, nil); return /*line :33:56*/_Cfunc_workaround_glfwGetCocoaWindow(_cgo0); }())
	return ret, fetchErrorIgnoringPlatformError()
}

// GetNSGLContext returns the NSOpenGLContext of the window.
func (w *Window) GetNSGLContext() (unsafe.Pointer, error) {
	ret := func() _cgo_unsafe.Pointer{ _cgo0 := /*line :39:41*/w.data; _cgoCheckPointer(_cgo0, nil); return /*line :39:48*/_Cfunc_workaround_glfwGetNSGLContext(_cgo0); }()
	return ret, fetchErrorIgnoringPlatformError()
}
